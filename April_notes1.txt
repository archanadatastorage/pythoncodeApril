

python


scope
 	: body begin
	tab 		: indent


Datatype

simple datatypes
	- Numeric : int,float, complex, byte
	- String : ' ', ""
	- bool : True, False, None
complex datatypes
	- list
	- set
	- Dictinary
	- tuple


+,-,*,/, //, **,%


explicit casting

is

conditional op : <, >, <= ,>= , ==, !=
or, and , not


[index position]
[start index : end index]
[start index : end index: jump]

-----
if condition(s) :
	True


if condition(s):
	True
else:
	false

if condition(s) :
	True
elif condition(s):
	true
elif condition(s):
	true
else:
	false


------------

match ... case



---------------------

Procedural Programing 

 function / procedural

def nameOfFunction([arguments]):
	statements
	return value


functional programming:
	* Pure object oriented
	* data immutable
	* First order value : function as object/value
	* Higher order function : function that receives / return another function
	* Pure function 

		def add(x,y):
			c=x+y
			return c

	* lambda exp : anoynemous function

	
		lambda x,y:x+y
			

-----------------------------
Day3


Source    ->    ByteCode   -> PVM
.py


comments
	#	: single line
	''' 	multi-line 
		'''

loops


- while


- for 




- break
- continue

Immutable datatype
	- Number
	- String
	- Tuple
	- bool
Mutable datatypes
	-List
	- Dictionaries
	- sets


formating String

slicing
updation
Replication
Membership : in, not in
reverse 

Tuple 
	- immutable
	- complex datatype : sequence of value
	- hetrogenous
	- (v1,v2,v3,v4....)
	- ordered
	- index

List 
	- mutable
	- complex  datatype : sequence of value
	- hetrogenous : value
	- ordered
	- [v1,v2,v3,v4....]
	- index

Dictionaries
	- mutable
	- complex  datatype : sequence of value
	- unordered
	- custom index : key,value
	- key: homogenous
	- value : hetrogenous
	- {k1:v2,k2:v3} 
	
Sets
	- mutable
	- complex  datatype : sequence of value
	- unique
	- unordered
	- {v1,v2,v3...}
	- union
	- intersection
	- minus

-------------------
Day4

List comprehension  : suger syntax

y2 = []
for i in years:
    y2.append(i)



y2 = [i for i in years]


-new_list = [exp  for i in coll]

-new_list = [exp for i in coll if condition(s)]

-new_list = [exp for i in coll for j in coll2]


-------------

function_name ([arguments]

- *argv		: Tuple
- **kwarg	: Dictionary

------
scripting file
- .py
- executable

- __main__

module : 
-------------------
Object oriented Programing


- code real world thing/ entity : object
class	: blueprint/definition		- Encapsulation
instance of class/object : memory

- attributes/instance varible
- class varible
- methods
- class methods 
- Constructor

- access modifier

- n objects	: concrete class
- no object

- Abstraction
- Overloading
- Inheritance : is a
	* single inheritance  : 1 parent
	* Multiple inheritance : multiple parents
- Composition : has a 

class

pass

--------------------

Day 6


Regular method : to change the state of the object  : self
class method : to change the state of the class varible
static method : not associated with a particular object

instance varibles
class varible
Static method

Inheritance

Parent class/ Super class

child class/ Sub class

Single inheritance

Multiple Inheritance


isinstance
issubclass

-----------------
Day 8

Multiple classes in association:

- Inheritance	: is A

- Composition : has a



Nested classed :  class within another class

------------------------

Dunder /Magic

__len__
__str__
__repr__
__add__
__del__


closure
decorator
  - 1 decorator to decorate multiple functions
  - 1 functions has multiple decorators

class

callable()
__call__

Getter/ setter/ deleter

@property
@functionasAttribute.setter
@functionasAttribute.deleter
Access Modifier

- public
- private   __

dir(class)
dir(obj)

Name Mangling
obj._className__PrivateVarible

---------------------------

Packages

Modules - 
import moduleName

search path

	- current dir
	- PYTHONPATH
	- standard Modules
	- site-package/lib

sys.path


Package 
	Folder/ directory
		- modules

- to organise related modules
- subpackage : folder within a package
- namespace of modules

Structure  of a Package
- modules
- subpackages
	subpackage
	modules
- __init__.py
	


__init__.py

* first file get executed when package is imported
* empty
* varible/functions/classess
* optional from 3.3
* subpackage will have its own copy of __init__.py

create package

1. create directoty strcuture
2. define modules
3. import modules in our code



MyProject
	- main.py
	- mypackage/
		- __init__.py
		- string_op.py
		- sub_package1/
			- __inti__.py
			- maths_ops.py
			- another_sub_package/
				-__init__.py
				- advanced_math.py
				- statistic.py
		-sub_package2/
			- __init__.py
			- utils.py
			- helper.py
		

__file__ : path of the file

string_op.py  => statistic.py



current dir : dir where the module is
root dir : starting point : MyProject
parent dir : one dir above the current dir



Relative import : import the modules that are present in current dir or subpackage


Parent import 



-------------------

Exception 

Error
	"India"
Built-in Exception
User defined Exception


BaseException
	- Exception
		-AttributeError
		-ArithmaticError
			-ZeroDivisionError
			-FloatPointError
			-OverFlowError
		- NameError
		-lookupError
			-IndexError
			-KeyError
		-TypeError
		-OSError
			-FileNotFoundError
			-Permissionv
			-TimeOutError
		

Exception Handling

	try:
		Suspect code
	except:
		handling code
	else:
		code to execute if no exception occured
	finally:
		always execute


try -> except -> finally
try -> else -> finally


Builtin exceptions are not good enough

* raise the explicitly : raise
* user defined exception : class


-----------------------


Numpy 

- Arrays implementation in python
- Datastructure
- collection of homegenous elements
- continous memory allocation
- pip install numpy 
- various ops on the arrays
- indexed
-mutable

Pandas

- data prepration
- data anlysis
- data structure
- Series
- Dataframe
- fast
- easy


Pandas Series

- 1D data structure
- index
- Hetrogenous data
- mutable

Pandas dataFrame

- N-D data strcuture
- hetrogenous
- mutable
- index : rows
- label : columns


--------------------
Databases

sqlite3
execute("Insert......")

SQlAlchemy


- python sql lib
- ORM : Object Relation Mapper

	DataBase			Python
	
	Table				class
	columns				attributes
	row				objects
	Consistency			Relationship
- flexible
- no SQL queries/ raw sql
	where(), order_by(),group_by()
- Database abstraction
- Transaction Management ... maintain consistency

conda prompt

pip install sqlalchemy


database
	server uri		localhost
	port			3306
	username		root
	password
	database		hr_db
+

database connector		Mysql

pip install mysql-connector

help('modules')

+

Python


Create Model













	












































































