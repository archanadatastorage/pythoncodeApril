

python


scope
 	: body begin
	tab 		: indent


Datatype

simple datatypes
	- Numeric : int,float, complex, byte
	- String : ' ', ""
	- bool : True, False, None
complex datatypes
	- list
	- set
	- Dictinary
	- tuple


+,-,*,/, //, **,%


explicit casting

is

conditional op : <, >, <= ,>= , ==, !=
or, and , not


[index position]
[start index : end index]
[start index : end index: jump]

-----
if condition(s) :
	True


if condition(s):
	True
else:
	false

if condition(s) :
	True
elif condition(s):
	true
elif condition(s):
	true
else:
	false


------------

match ... case



---------------------

Procedural Programing 

 function / procedural

def nameOfFunction([arguments]):
	statements
	return value


functional programming:
	* Pure object oriented
	* data immutable
	* First order value : function as object/value
	* Higher order function : function that receives / return another function
	* Pure function 

		def add(x,y):
			c=x+y
			return c

	* lambda exp : anoynemous function

	
		lambda x,y:x+y
			

-----------------------------
Day3


Source    ->    ByteCode   -> PVM
.py


comments
	#	: single line
	''' 	multi-line 
		'''

loops


- while


- for 




- break
- continue

Immutable datatype
	- Number
	- String
	- Tuple
	- bool
Mutable datatypes
	-List
	- Dictionaries
	- sets


formating String

slicing
updation
Replication
Membership : in, not in
reverse 

Tuple 
	- immutable
	- complex datatype : sequence of value
	- hetrogenous
	- (v1,v2,v3,v4....)
	- ordered
	- index

List 
	- mutable
	- complex  datatype : sequence of value
	- hetrogenous : value
	- ordered
	- [v1,v2,v3,v4....]
	- index

Dictionaries
	- mutable
	- complex  datatype : sequence of value
	- unordered
	- custom index : key,value
	- key: homogenous
	- value : hetrogenous
	- {k1:v2,k2:v3} 
	
Sets
	- mutable
	- complex  datatype : sequence of value
	- unique
	- unordered
	- {v1,v2,v3...}
	- union
	- intersection
	- minus

-------------------
Day4

List comprehension  : suger syntax

y2 = []
for i in years:
    y2.append(i)



y2 = [i for i in years]


-new_list = [exp  for i in coll]

-new_list = [exp for i in coll if condition(s)]

-new_list = [exp for i in coll for j in coll2]


-------------

function_name ([arguments]

- *argv		: Tuple
- **kwarg	: Dictionary

------
scripting file
- .py
- executable

- __main__

module : 
-------------------
Object oriented Programing


- code real world thing/ entity : object
class	: blueprint/definition		- Encapsulation
instance of class/object : memory

- attributes/instance varible
- class varible
- methods
- class methods 
- Constructor

- access modifier

- n objects	: concrete class
- no object

- Abstraction
- Overloading
- Inheritance : is a
	* single inheritance  : 1 parent
	* Multiple inheritance : multiple parents
- Composition : has a 

class

pass













































